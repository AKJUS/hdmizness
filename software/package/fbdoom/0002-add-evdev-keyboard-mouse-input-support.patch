commit f56d5acddfafa2bfd7edf449b20d63ab0fb903d8
Author: Tuetuopay <tuetuopay@me.com>
Date:   Thu Aug 17 00:29:57 2023 +0200

    Add evdev keyboard/mouse input support
    
    For now, to use with https://github.com/Tuetuopay/kbdsrv

diff --git a/fbdoom/Makefile b/fbdoom/Makefile
index fb32c7b..348f819 100644
--- a/fbdoom/Makefile
+++ b/fbdoom/Makefile
@@ -17,7 +17,9 @@ endif
 #CFLAGS+=-Wunused-const-variable=0 
 #CFLAGS+=-fsanitize=address
 OBJS+=$(OBJDIR)/i_video_fbdev.o
-OBJS+=$(OBJDIR)/i_input_tty.o
+OBJS+=$(OBJDIR)/i_input_at.o
+#OBJS+=$(OBJDIR)/i_input_tty.o
+OBJS+=$(OBJDIR)/i_input_dev_input.o
 
 CC=$(CROSS_COMPILE)gcc  # gcc or g++
 CFLAGS+=-ggdb3 -Os
diff --git a/fbdoom/i_input_at.c b/fbdoom/i_input_at.c
new file mode 100644
index 0000000..a7e23bb
--- /dev/null
+++ b/fbdoom/i_input_at.c
@@ -0,0 +1,216 @@
+//
+// Copyright(C) 1993-1996 Id Software, Inc.
+// Copyright(C) 2005-2014 Simon Howard
+//
+// This program is free software; you can redistribute it and/or
+// modify it under the terms of the GNU General Public License
+// as published by the Free Software Foundation; either version 2
+// of the License, or (at your option) any later version.
+//
+// This program is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// DESCRIPTION:
+//   DOOM keyboard input common stuff
+//
+
+#include "doomtype.h"
+#include "doomkeys.h"
+
+// Is the shift key currently down?
+static boolean shiftdown = false;
+
+// Lookup table for mapping AT keycodes to their doom keycode
+static const char at_to_doom[] = {
+    /* 0x00 */ 0x00,
+    /* 0x01 */ KEY_ESCAPE,
+    /* 0x02 */ '1',
+    /* 0x03 */ '2',
+    /* 0x04 */ '3',
+    /* 0x05 */ '4',
+    /* 0x06 */ '5',
+    /* 0x07 */ '6',
+    /* 0x08 */ '7',
+    /* 0x09 */ '8',
+    /* 0x0a */ '9',
+    /* 0x0b */ '0',
+    /* 0x0c */ '-',
+    /* 0x0d */ '=',
+    /* 0x0e */ KEY_BACKSPACE,
+    /* 0x0f */ KEY_TAB,
+    /* 0x10 */ 'q',
+    /* 0x11 */ 'w',
+    /* 0x12 */ 'e',
+    /* 0x13 */ 'r',
+    /* 0x14 */ 't',
+    /* 0x15 */ 'y',
+    /* 0x16 */ 'u',
+    /* 0x17 */ 'i',
+    /* 0x18 */ 'o',
+    /* 0x19 */ 'p',
+    /* 0x1a */ '[',
+    /* 0x1b */ ']',
+    /* 0x1c */ KEY_ENTER,
+    /* 0x1d */ KEY_FIRE, /* KEY_RCTRL, */
+    /* 0x1e */ 'a',
+    /* 0x1f */ 's',
+    /* 0x20 */ 'd',
+    /* 0x21 */ 'f',
+    /* 0x22 */ 'g',
+    /* 0x23 */ 'h',
+    /* 0x24 */ 'j',
+    /* 0x25 */ 'k',
+    /* 0x26 */ 'l',
+    /* 0x27 */ ';',
+    /* 0x28 */ '\'',
+    /* 0x29 */ '`',
+    /* 0x2a */ KEY_RSHIFT,
+    /* 0x2b */ '\\',
+    /* 0x2c */ 'z',
+    /* 0x2d */ 'x',
+    /* 0x2e */ 'c',
+    /* 0x2f */ 'v',
+    /* 0x30 */ 'b',
+    /* 0x31 */ 'n',
+    /* 0x32 */ 'm',
+    /* 0x33 */ ',',
+    /* 0x34 */ '.',
+    /* 0x35 */ '/',
+    /* 0x36 */ KEY_RSHIFT,
+    /* 0x37 */ KEYP_MULTIPLY,
+    /* 0x38 */ KEY_LALT,
+    /* 0x39 */ KEY_USE,
+    /* 0x3a */ KEY_CAPSLOCK,
+    /* 0x3b */ KEY_F1,
+    /* 0x3c */ KEY_F2,
+    /* 0x3d */ KEY_F3,
+    /* 0x3e */ KEY_F4,
+    /* 0x3f */ KEY_F5,
+    /* 0x40 */ KEY_F6,
+    /* 0x41 */ KEY_F7,
+    /* 0x42 */ KEY_F8,
+    /* 0x43 */ KEY_F9,
+    /* 0x44 */ KEY_F10,
+    /* 0x45 */ KEY_NUMLOCK,
+    /* 0x46 */ 0x0,
+    /* 0x47 */ 0x0, /* 47 (Keypad-7/Home) */
+    /* 0x48 */ 0x0, /* 48 (Keypad-8/Up) */
+    /* 0x49 */ 0x0, /* 49 (Keypad-9/PgUp) */
+    /* 0x4a */ 0x0, /* 4a (Keypad--) */
+    /* 0x4b */ 0x0, /* 4b (Keypad-4/Left) */
+    /* 0x4c */ 0x0, /* 4c (Keypad-5) */
+    /* 0x4d */ 0x0, /* 4d (Keypad-6/Right) */
+    /* 0x4e */ 0x0, /* 4e (Keypad-+) */
+    /* 0x4f */ 0x0, /* 4f (Keypad-1/End) */
+    /* 0x50 */ 0x0, /* 50 (Keypad-2/Down) */
+    /* 0x51 */ 0x0, /* 51 (Keypad-3/PgDn) */
+    /* 0x52 */ 0x0, /* 52 (Keypad-0/Ins) */
+    /* 0x53 */ 0x0, /* 53 (Keypad-./Del) */
+    /* 0x54 */ 0x0, /* 54 (Alt-SysRq) on a 84+ key keyboard */
+    /* 0x55 */ 0x0,
+    /* 0x56 */ 0x0,
+    /* 0x57 */ 0x0,
+    /* 0x58 */ 0x0,
+    /* 0x59 */ 0x0,
+    /* 0x5a */ 0x0,
+    /* 0x5b */ 0x0,
+    /* 0x5c */ 0x0,
+    /* 0x5d */ 0x0,
+    /* 0x5e */ 0x0,
+    /* 0x5f */ 0x0,
+    /* 0x60 */ 0x0,
+    /* 0x61 */ 0x0,
+    /* 0x62 */ 0x0,
+    /* 0x63 */ 0x0,
+    /* 0x64 */ 0x0,
+    /* 0x65 */ 0x0,
+    /* 0x66 */ 0x0,
+    /* 0x67 */ KEY_UPARROW,
+    /* 0x68 */ 0x0,
+    /* 0x69 */ KEY_LEFTARROW,
+    /* 0x6a */ KEY_RIGHTARROW,
+    /* 0x6b */ 0x0,
+    /* 0x6c */ KEY_DOWNARROW,
+    /* 0x6d */ 0x0,
+    /* 0x6e */ 0x0,
+    /* 0x6f */ 0x0,
+    /* 0x70 */ 0x0,
+    /* 0x71 */ 0x0,
+    /* 0x72 */ 0x0,
+    /* 0x73 */ 0x0,
+    /* 0x74 */ 0x0,
+    /* 0x75 */ 0x0,
+    /* 0x76 */ 0x0,
+    /* 0x77 */ 0x0,
+    /* 0x78 */ 0x0,
+    /* 0x79 */ 0x0,
+    /* 0x7a */ 0x0,
+    /* 0x7b */ 0x0,
+    /* 0x7c */ 0x0,
+    /* 0x7d */ 0x0,
+    /* 0x7e */ 0x0,
+    /* 0x7f */ KEY_FIRE, //KEY_RCTRL,
+};
+
+// Lookup table for mapping ASCII characters to their equivalent when
+// shift is pressed on an American layout keyboard:
+static const char shiftxform[] = {
+    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10,
+    11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
+    21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
+    31, ' ', '!', '"', '#', '$', '%', '&',
+    '"', // shift-'
+    '(', ')', '*', '+',
+    '<', // shift-,
+    '_', // shift--
+    '>', // shift-.
+    '?', // shift-/
+    ')', // shift-0
+    '!', // shift-1
+    '@', // shift-2
+    '#', // shift-3
+    '$', // shift-4
+    '%', // shift-5
+    '^', // shift-6
+    '&', // shift-7
+    '*', // shift-8
+    '(', // shift-9
+    ':',
+    ':', // shift-;
+    '<',
+    '+', // shift-=
+    '>', '?', '@',
+    'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N',
+    'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',
+    '[', // shift-[
+    '!', // shift-backslash - OH MY GOD DOES WATCOM SUCK
+    ']', // shift-]
+    '"', '_',
+    '\'', // shift-`
+    'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N',
+    'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',
+    '{', '|', '}', '~', 127
+};
+
+unsigned char I_TranslateKey(unsigned char key) {
+    if (key < sizeof(at_to_doom))
+        return at_to_doom[key];
+    return 0x0;
+}
+
+unsigned char I_GetTypedChar(unsigned char key) {
+    key = I_TranslateKey(key);
+
+    // Is shift held down?  If so, perform a translation.
+    if (shiftdown)
+        key = (key >= 0 && key < arrlen(shiftxform)) ? shiftxform[key] : 0;
+
+    return key;
+}
+
+void I_UpdateShiftStatus(boolean pressed, unsigned char key) {
+    if (key == 0x2a || key == 0x36)
+        shiftdown = pressed;
+}
diff --git a/fbdoom/i_input_at.h b/fbdoom/i_input_at.h
new file mode 100644
index 0000000..1cddc5f
--- /dev/null
+++ b/fbdoom/i_input_at.h
@@ -0,0 +1,10 @@
+#ifndef __I_INPUT_AT__
+#define __I_INPUT_AT__
+
+#include "doomtype.h"
+
+unsigned char I_TranslateKey(unsigned char key);
+unsigned char I_GetTypedChar(unsigned char key);
+void I_UpdateShiftStatus(boolean pressed, unsigned char key);
+
+#endif
diff --git a/fbdoom/i_input_dev_input.c b/fbdoom/i_input_dev_input.c
new file mode 100644
index 0000000..6418fa8
--- /dev/null
+++ b/fbdoom/i_input_dev_input.c
@@ -0,0 +1,175 @@
+//
+// Copyright(C) 1993-1996 Id Software, Inc.
+// Copyright(C) 2005-2014 Simon Howard
+//
+// This program is free software; you can redistribute it and/or
+// modify it under the terms of the GNU General Public License
+// as published by the Free Software Foundation; either version 2
+// of the License, or (at your option) any later version.
+//
+// This program is distributed in the hope that it will be useful,
+// but WITHOUT ANY WARRANTY; without even the implied warranty of
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+// GNU General Public License for more details.
+//
+// DESCRIPTION:
+//   DOOM keyboard input via /dev/input
+//
+
+#include <asm-generic/errno-base.h>
+#include <asm-generic/errno.h>
+#include <errno.h>
+#include <fcntl.h>
+#include <linux/input-event-codes.h>
+#include <linux/input.h>
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <unistd.h>
+
+#include "d_event.h"
+#include "doomtype.h"
+#include "i_input_at.h"
+#include "i_system.h"
+
+int vanilla_keyboard_mapping = 1;
+
+static int kb = -1;
+static int mouse = -1;
+
+static int find_event(const char *name) {
+    char *line = NULL, *event = NULL;
+    boolean found = false;
+    int evt_no;
+    size_t n;
+
+    FILE *f = NULL;
+    if (!(f = fopen("/proc/bus/input/devices", "ro"))) {
+        printf("Failed to open /proc/bus/input/devices: %s\n", strerror(errno));
+        goto fail;
+    }
+    while (getline(&line, &n, f) != EOF) {
+        line[strlen(line) - 1] = '\0'; // remove \n
+
+        if (line[0] == 'N' && strstr(line, name))
+            found = true;
+        if (found && line[0] == 'H')
+            break;
+    }
+    fclose(f);
+
+    if (!found) {
+        printf("Did not find any input device for `%s`.\n", name);
+        goto fail;
+    }
+
+    // We can skip the first token as it'll be "H: Handler="
+    event = strtok(line, "=");
+    while ((event = strtok(NULL, " ")) && !strstr(event, "event"));
+
+    if (!event) {
+        printf("Did not find event name for the device `%s`.\n", name);
+        goto fail;
+    }
+
+    event += strlen("event");
+    evt_no = atoi(event);
+    free(line);
+
+    return evt_no;
+
+fail:
+    exit(0);
+}
+
+static void init_kbd(void) {
+    char path[128] = {};
+    int kbd_evt_no;
+
+    kbd_evt_no = find_event("kbdsrv virtual keyboard");
+    snprintf(path, 127, "/dev/input/event%d", kbd_evt_no);
+
+    printf("Using keyboard at %s\n", path);
+    if (!(kb = open(path, O_RDONLY | O_NONBLOCK))) {
+        printf("Failed to open `%s`: %s\n", path, strerror(errno));
+        goto fail;
+    }
+
+    return;
+
+fail:
+    exit(0);
+}
+
+static void init_mouse(void) {
+    char path[128] = {};
+    int mouse_evt_no;
+
+    mouse_evt_no = find_event("kbdsrv virtual mouse");
+    snprintf(path, 127, "/dev/input/event%d", mouse_evt_no);
+
+    printf("Using mouse at %s\n", path);
+    if (!(mouse = open(path, O_RDONLY | O_NONBLOCK))) {
+        printf("Failed to open `%s`: %s\n", path, strerror(errno));
+        goto fail;
+    }
+
+    return;
+
+fail:
+    exit(0);
+}
+
+void I_InitInput(void) {
+    init_kbd();
+    init_mouse();
+}
+
+void I_GetEvent() {
+    struct input_event in_event;
+
+    while (read(kb, &in_event, sizeof(in_event)) >= 0) {
+        event_t out_event = {.data2 = 0};
+
+        if (in_event.type != EV_KEY || in_event.code > 0xff) continue;
+        if (in_event.code == 0xe) I_Quit();
+
+        switch (in_event.value) {
+            case 0: out_event.type = ev_keyup;   break;
+            case 1: out_event.type = ev_keydown; break;
+            case 2: // autorepeat
+            default: continue;
+        }
+
+        I_UpdateShiftStatus(out_event.type == ev_keydown, in_event.code);
+
+        out_event.data1 = I_TranslateKey(in_event.code);
+        if (out_event.type != ev_keyup)
+            out_event.data2 = I_GetTypedChar(in_event.code);
+
+        if (out_event.data1 != 0) D_PostEvent(&out_event);
+
+        // printf("key%s %c (0x%x)\n", out_event.type == ev_keydown ? "down" : "up", out_event.data2, out_event.data1);
+    }
+
+    if (errno != EAGAIN && errno != EWOULDBLOCK)
+        printf("Failed to read from the keyboard: %s\n", strerror(errno));
+
+    // Accumulate mouse inputs
+    event_t out_event = {.type = ev_mouse, .data1 = 0, .data2 = 0, .data3 = 0};
+    while (read(mouse, &in_event, sizeof(in_event)) >= 0) {
+        if (in_event.type != EV_REL) continue;
+
+        switch (in_event.code) {
+            case 0: out_event.data2 += in_event.value * 5; break; // X axis
+            // case 1: out_event.data3 = in_event.value; break; // Y axis
+            default: continue;
+        }
+    }
+
+    if (out_event.data2 != 0)
+        D_PostEvent(&out_event);
+
+    if (errno != EAGAIN && errno != EWOULDBLOCK)
+        printf("Failed to read from the mouse: %s\n", strerror(errno));
+}
diff --git a/fbdoom/i_input_tty.c b/fbdoom/i_input_tty.c
index 04ececc..372eada 100644
--- a/fbdoom/i_input_tty.c
+++ b/fbdoom/i_input_tty.c
@@ -33,6 +33,7 @@
 #include "deh_str.h"
 #include "doomtype.h"
 #include "doomkeys.h"
+#include "i_input_at.h"
 #include "i_joystick.h"
 #include "i_system.h"
 #include "i_swap.h"
@@ -49,187 +50,9 @@
 
 int vanilla_keyboard_mapping = 1;
 
-// Is the shift key currently down?
-
-static int shiftdown = 0;
-
 // Should we take no keyboard input?
 static int no_kb = 0;
 
-// Lookup table for mapping AT keycodes to their doom keycode
-static const char at_to_doom[] =
-{
-    /* 0x00 */ 0x00,
-    /* 0x01 */ KEY_ESCAPE,
-    /* 0x02 */ '1',
-    /* 0x03 */ '2',
-    /* 0x04 */ '3',
-    /* 0x05 */ '4',
-    /* 0x06 */ '5',
-    /* 0x07 */ '6',
-    /* 0x08 */ '7',
-    /* 0x09 */ '8',
-    /* 0x0a */ '9',
-    /* 0x0b */ '0',
-    /* 0x0c */ '-',
-    /* 0x0d */ '=',
-    /* 0x0e */ KEY_BACKSPACE,
-    /* 0x0f */ KEY_TAB,
-    /* 0x10 */ 'q',
-    /* 0x11 */ 'w',
-    /* 0x12 */ 'e',
-    /* 0x13 */ 'r',
-    /* 0x14 */ 't',
-    /* 0x15 */ 'y',
-    /* 0x16 */ 'u',
-    /* 0x17 */ 'i',
-    /* 0x18 */ 'o',
-    /* 0x19 */ 'p',
-    /* 0x1a */ '[',
-    /* 0x1b */ ']',
-    /* 0x1c */ KEY_ENTER,
-    /* 0x1d */ KEY_FIRE, /* KEY_RCTRL, */
-    /* 0x1e */ 'a',
-    /* 0x1f */ 's',
-    /* 0x20 */ 'd',
-    /* 0x21 */ 'f',
-    /* 0x22 */ 'g',
-    /* 0x23 */ 'h',
-    /* 0x24 */ 'j',
-    /* 0x25 */ 'k',
-    /* 0x26 */ 'l',
-    /* 0x27 */ ';',
-    /* 0x28 */ '\'',
-    /* 0x29 */ '`',
-    /* 0x2a */ KEY_RSHIFT,
-    /* 0x2b */ '\\',
-    /* 0x2c */ 'z',
-    /* 0x2d */ 'x',
-    /* 0x2e */ 'c',
-    /* 0x2f */ 'v',
-    /* 0x30 */ 'b',
-    /* 0x31 */ 'n',
-    /* 0x32 */ 'm',
-    /* 0x33 */ ',',
-    /* 0x34 */ '.',
-    /* 0x35 */ '/',
-    /* 0x36 */ KEY_RSHIFT,
-    /* 0x37 */ KEYP_MULTIPLY,
-    /* 0x38 */ KEY_LALT,
-    /* 0x39 */ KEY_USE,
-    /* 0x3a */ KEY_CAPSLOCK,
-    /* 0x3b */ KEY_F1,
-    /* 0x3c */ KEY_F2,
-    /* 0x3d */ KEY_F3,
-    /* 0x3e */ KEY_F4,
-    /* 0x3f */ KEY_F5,
-    /* 0x40 */ KEY_F6,
-    /* 0x41 */ KEY_F7,
-    /* 0x42 */ KEY_F8,
-    /* 0x43 */ KEY_F9,
-    /* 0x44 */ KEY_F10,
-    /* 0x45 */ KEY_NUMLOCK,
-    /* 0x46 */ 0x0,
-    /* 0x47 */ 0x0, /* 47 (Keypad-7/Home) */
-    /* 0x48 */ 0x0, /* 48 (Keypad-8/Up) */
-    /* 0x49 */ 0x0, /* 49 (Keypad-9/PgUp) */
-    /* 0x4a */ 0x0, /* 4a (Keypad--) */
-    /* 0x4b */ 0x0, /* 4b (Keypad-4/Left) */
-    /* 0x4c */ 0x0, /* 4c (Keypad-5) */
-    /* 0x4d */ 0x0, /* 4d (Keypad-6/Right) */
-    /* 0x4e */ 0x0, /* 4e (Keypad-+) */
-    /* 0x4f */ 0x0, /* 4f (Keypad-1/End) */
-    /* 0x50 */ 0x0, /* 50 (Keypad-2/Down) */
-    /* 0x51 */ 0x0, /* 51 (Keypad-3/PgDn) */
-    /* 0x52 */ 0x0, /* 52 (Keypad-0/Ins) */
-    /* 0x53 */ 0x0, /* 53 (Keypad-./Del) */
-    /* 0x54 */ 0x0, /* 54 (Alt-SysRq) on a 84+ key keyboard */
-    /* 0x55 */ 0x0,
-    /* 0x56 */ 0x0,
-    /* 0x57 */ 0x0,
-    /* 0x58 */ 0x0,
-    /* 0x59 */ 0x0,
-    /* 0x5a */ 0x0,
-    /* 0x5b */ 0x0,
-    /* 0x5c */ 0x0,
-    /* 0x5d */ 0x0,
-    /* 0x5e */ 0x0,
-    /* 0x5f */ 0x0,
-    /* 0x60 */ 0x0,
-    /* 0x61 */ 0x0,
-    /* 0x62 */ 0x0,
-    /* 0x63 */ 0x0,
-    /* 0x64 */ 0x0,
-    /* 0x65 */ 0x0,
-    /* 0x66 */ 0x0,
-    /* 0x67 */ KEY_UPARROW,
-    /* 0x68 */ 0x0,
-    /* 0x69 */ KEY_LEFTARROW,
-    /* 0x6a */ KEY_RIGHTARROW,
-    /* 0x6b */ 0x0,
-    /* 0x6c */ KEY_DOWNARROW,
-    /* 0x6d */ 0x0,
-    /* 0x6e */ 0x0,
-    /* 0x6f */ 0x0,
-    /* 0x70 */ 0x0,
-    /* 0x71 */ 0x0,
-    /* 0x72 */ 0x0,
-    /* 0x73 */ 0x0,
-    /* 0x74 */ 0x0,
-    /* 0x75 */ 0x0,
-    /* 0x76 */ 0x0,
-    /* 0x77 */ 0x0,
-    /* 0x78 */ 0x0,
-    /* 0x79 */ 0x0,
-    /* 0x7a */ 0x0,
-    /* 0x7b */ 0x0,
-    /* 0x7c */ 0x0,
-    /* 0x7d */ 0x0,
-    /* 0x7e */ 0x0,
-    /* 0x7f */ KEY_FIRE, //KEY_RCTRL,
-};
-
-// Lookup table for mapping ASCII characters to their equivalent when
-// shift is pressed on an American layout keyboard:
-static const char shiftxform[] =
-{
-    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10,
-    11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
-    21, 22, 23, 24, 25, 26, 27, 28, 29, 30,
-    31, ' ', '!', '"', '#', '$', '%', '&',
-    '"', // shift-'
-    '(', ')', '*', '+',
-    '<', // shift-,
-    '_', // shift--
-    '>', // shift-.
-    '?', // shift-/
-    ')', // shift-0
-    '!', // shift-1
-    '@', // shift-2
-    '#', // shift-3
-    '$', // shift-4
-    '%', // shift-5
-    '^', // shift-6
-    '&', // shift-7
-    '*', // shift-8
-    '(', // shift-9
-    ':',
-    ':', // shift-;
-    '<',
-    '+', // shift-=
-    '>', '?', '@',
-    'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N',
-    'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',
-    '[', // shift-[
-    '!', // shift-backslash - OH MY GOD DOES WATCOM SUCK
-    ']', // shift-]
-    '"', '_',
-    '\'', // shift-`
-    'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N',
-    'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',
-    '{', '|', '}', '~', 127
-};
-
 /* Checks whether or not the given file descriptor is associated
    with a local keyboard.
    Returns 1 if it is, 0 if not (or if something prevented us from
@@ -371,56 +194,6 @@ int kbd_read(int *pressed, unsigned char *key)
     return 1;
 }
 
-static unsigned char TranslateKey(unsigned char key)
-{
-    if (key < sizeof(at_to_doom))
-        return at_to_doom[key];
-    else
-        return 0x0;
-
-    //default:
-    //  return tolower(key);
-}
-
-// Get the equivalent ASCII (Unicode?) character for a keypress.
-
-static unsigned char GetTypedChar(unsigned char key)
-{
-    key = TranslateKey(key);
-
-    // Is shift held down?  If so, perform a translation.
-
-    if (shiftdown > 0)
-    {
-        if (key >= 0 && key < arrlen(shiftxform))
-        {
-            key = shiftxform[key];
-        }
-        else
-        {
-            key = 0;
-        }
-    }
-
-    return key;
-}
-
-static void UpdateShiftStatus(int pressed, unsigned char key)
-{
-    int change;
-
-    if (pressed) {
-        change = 1;
-    } else {
-        change = -1;
-    }
-
-    if (key == 0x2a || key == 0x36) {
-        shiftdown += change;
-    }
-}
-
-
 void I_GetEvent(void)
 {
     if (no_kb)
diff --git a/fbdoom/i_video_fbdev.c b/fbdoom/i_video_fbdev.c
index 2a6d239..81bf466 100644
--- a/fbdoom/i_video_fbdev.c
+++ b/fbdoom/i_video_fbdev.c
@@ -605,3 +605,4 @@ void I_DisplayFPSDots (boolean dots_on)
 void I_CheckIsScreensaver (void)
 {
 }
+//}
